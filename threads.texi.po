# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: Emacs 26.1\n"
"POT-Creation-Date: 2020-06-01 21:19+0900\n"
"PO-Revision-Date: 2020-06-02 06:44+0900\n"
"Last-Translator: Ayanokoji Takesi <ayanokoji.takesi@gmail.com>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: chapter
#: original_texis/threads.texi:5 original_texis/threads.texi:6
#, no-wrap
msgid "Threads"
msgstr "Threads"

#. type: cindex
#: original_texis/threads.texi:7
#, no-wrap
msgid "threads"
msgstr "threads"

#. type: cindex
#: original_texis/threads.texi:8
#, no-wrap
msgid "concurrency"
msgstr "concurrency"

#. type: Plain text
#: original_texis/threads.texi:17
msgid "Emacs Lisp provides a limited form of concurrency, called @dfn{threads}.  All the threads in a given instance of Emacs share the same memory.  Concurrency in Emacs Lisp is ``mostly cooperative'', meaning that Emacs will only switch execution between threads at well-defined times.  However, the Emacs thread support has been designed in a way to later allow more fine-grained concurrency, and correct programs should not rely on cooperative threading."
msgstr "Emacs Lispは@dfn{スレッド(thread)}と呼ばれる限定的な並行性(concurrency)の形式を提供します。Emacsの与えられたインターフェース内のすべてのスレッドは同じメモリーを共有します。Emacs Lisp内の並行性は``概ね協調的(mostly cooperative)''であり、これはEmacsがスレッド間の実効を明確に定義された時間にだけ切り替えることを意味しています。しかしEmacsでのスレッドのサポートは将来よりきめの細かい並行性が可能な方法でデザインされており、正しいプログラムは協調的なスレッドに依存するべきではありません。"

#. type: Plain text
#: original_texis/threads.texi:23
msgid "Currently, thread switching will occur upon explicit request via @code{thread-yield}, when waiting for keyboard input or for process output (e.g., during @code{accept-process-output}), or during blocking operations relating to threads, such as mutex locking or @code{thread-join}."
msgstr ""

#. type: Plain text
#: original_texis/threads.texi:27
msgid "Emacs Lisp provides primitives to create and control threads, and also to create and control mutexes and condition variables, useful for thread synchronization."
msgstr ""

#. type: Plain text
#: original_texis/threads.texi:32
msgid "While global variables are shared among all Emacs Lisp threads, local variables are not---a dynamic @code{let} binding is local.  Each thread also has its own current buffer (@pxref{Current Buffer}) and its own match data (@pxref{Match Data})."
msgstr ""

#. type: Plain text
#: original_texis/threads.texi:39
msgid "Note that @code{let} bindings are treated specially by the Emacs Lisp implementation.  There is no way to duplicate this unwinding and rewinding behavior other than by using @code{let}.  For example, a manual implementation of @code{let} written using @code{unwind-protect} cannot arrange for variable values to be thread-specific."
msgstr ""

#. type: Plain text
#: original_texis/threads.texi:43
msgid "In the case of lexical bindings (@pxref{Variable Scoping}), a closure is an object like any other in Emacs Lisp, and bindings in a closure are shared by any threads invoking the closure."
msgstr ""

#. type: section
#: original_texis/threads.texi:48 original_texis/threads.texi:50
#: original_texis/threads.texi:51
#, no-wrap
msgid "Basic Thread Functions"
msgstr ""

#. type: menuentry
#: original_texis/threads.texi:48
msgid "Basic thread functions."
msgstr ""

#. type: section
#: original_texis/threads.texi:48 original_texis/threads.texi:141
#: original_texis/threads.texi:142
#, no-wrap
msgid "Mutexes"
msgstr ""

#. type: menuentry
#: original_texis/threads.texi:48
msgid "Mutexes allow exclusive access to data."
msgstr ""

#. type: section
#: original_texis/threads.texi:48 original_texis/threads.texi:188
#: original_texis/threads.texi:189
#, no-wrap
msgid "Condition Variables"
msgstr ""

#. type: menuentry
#: original_texis/threads.texi:48
msgid "Inter-thread events."
msgstr ""

#. type: Plain text
#: original_texis/threads.texi:56
msgid "Threads can be created and waited for.  A thread cannot be exited directly, but the current thread can be exited implicitly, and other threads can be signaled."
msgstr ""

#. type: defun
#: original_texis/threads.texi:57
#, no-wrap
msgid "make-thread function &optional name"
msgstr ""

#. type: defun
#: original_texis/threads.texi:60
msgid "Create a new thread of execution which invokes @var{function}.  When @var{function} returns, the thread exits."
msgstr ""

#. type: defun
#: original_texis/threads.texi:63
msgid "The new thread is created with no local variable bindings in effect.  The new thread's current buffer is inherited from the current thread."
msgstr ""

#. type: defun
#: original_texis/threads.texi:67
msgid "@var{name} can be supplied to give a name to the thread.  The name is used for debugging and informational purposes only; it has no meaning to Emacs.  If @var{name} is provided, it must be a string."
msgstr ""

#. type: defun
#: original_texis/threads.texi:69
msgid "This function returns the new thread."
msgstr ""

#. type: defun
#: original_texis/threads.texi:71
#, no-wrap
msgid "threadp object"
msgstr ""

#. type: defun
#: original_texis/threads.texi:74
msgid "This function returns @code{t} if @var{object} represents an Emacs thread, @code{nil} otherwise."
msgstr ""

#. type: defun
#: original_texis/threads.texi:76
#, no-wrap
msgid "thread-join thread"
msgstr ""

#. type: defun
#: original_texis/threads.texi:80
msgid "Block until @var{thread} exits, or until the current thread is signaled.  If @var{thread} has already exited, this returns immediately."
msgstr ""

#. type: defun
#: original_texis/threads.texi:82
#, no-wrap
msgid "thread-signal thread error-symbol data"
msgstr ""

#. type: defun
#: original_texis/threads.texi:90
msgid "Like @code{signal} (@pxref{Signaling Errors}), but the signal is delivered in the thread @var{thread}.  If @var{thread} is the current thread, then this just calls @code{signal} immediately.  Otherwise, @var{thread} will receive the signal as soon as it becomes current.  If @var{thread} was blocked by a call to @code{mutex-lock}, @code{condition-wait}, or @code{thread-join}; @code{thread-signal} will unblock it."
msgstr ""

#. type: defun
#: original_texis/threads.texi:92
#, no-wrap
msgid "thread-yield"
msgstr ""

#. type: defun
#: original_texis/threads.texi:94
msgid "Yield execution to the next runnable thread."
msgstr ""

#. type: defun
#: original_texis/threads.texi:96
#, no-wrap
msgid "thread-name thread"
msgstr ""

#. type: defun
#: original_texis/threads.texi:98
msgid "Return the name of @var{thread}, as specified to @code{make-thread}."
msgstr ""

#. type: defun
#: original_texis/threads.texi:100
#, no-wrap
msgid "thread-alive-p thread"
msgstr ""

#. type: defun
#: original_texis/threads.texi:103
msgid "Return @code{t} if @var{thread} is alive, or @code{nil} if it is not.  A thread is alive as long as its function is still executing."
msgstr ""

#. type: defun
#: original_texis/threads.texi:105
#, no-wrap
msgid "thread--blocker thread"
msgstr ""

#. type: defun
#: original_texis/threads.texi:109
msgid "Return the object that @var{thread} is waiting on.  This function is primarily intended for debugging, and is given a ``double hyphen'' name to indicate that."
msgstr ""

#. type: defun
#: original_texis/threads.texi:112
msgid "If @var{thread} is blocked in @code{thread-join}, this returns the thread for which it is waiting."
msgstr ""

#. type: defun
#: original_texis/threads.texi:114
msgid "If @var{thread} is blocked in @code{mutex-lock}, this returns the mutex."
msgstr ""

#. type: defun
#: original_texis/threads.texi:117
msgid "If @var{thread} is blocked in @code{condition-wait}, this returns the condition variable."
msgstr ""

#. type: defun
#: original_texis/threads.texi:119
msgid "Otherwise, this returns @code{nil}."
msgstr ""

#. type: defun
#: original_texis/threads.texi:121
#, no-wrap
msgid "current-thread"
msgstr ""

#. type: defun
#: original_texis/threads.texi:123
msgid "Return the current thread."
msgstr ""

#. type: defun
#: original_texis/threads.texi:125
#, no-wrap
msgid "all-threads"
msgstr ""

#. type: defun
#: original_texis/threads.texi:128
msgid "Return a list of all the live thread objects.  A new list is returned by each invocation."
msgstr ""

#. type: Plain text
#: original_texis/threads.texi:133
msgid "When code run by a thread signals an error that is unhandled, the thread exits.  Other threads can access the error form which caused the thread to exit using the following function."
msgstr ""

#. type: defun
#: original_texis/threads.texi:134
#, no-wrap
msgid "thread-last-error"
msgstr ""

#. type: defun
#: original_texis/threads.texi:139
msgid "This function returns the last error form recorded when a thread exited due to an error.  Each thread that exits abnormally overwrites the form stored by the previous thread's error with a new value, so only the last one can be accessed."
msgstr ""

#. type: Plain text
#: original_texis/threads.texi:148
msgid "A @dfn{mutex} is an exclusive lock.  At any moment, zero or one threads may own a mutex.  If a thread attempts to acquire a mutex, and the mutex is already owned by some other thread, then the acquiring thread will block until the mutex becomes available."
msgstr ""

#. type: Plain text
#: original_texis/threads.texi:155
msgid "Emacs Lisp mutexes are of a type called @dfn{recursive}, which means that a thread can re-acquire a mutex it owns any number of times.  A mutex keeps a count of how many times it has been acquired, and each acquisition of a mutex must be paired with a release.  The last release by a thread of a mutex reverts it to the unowned state, potentially allowing another thread to acquire the mutex."
msgstr ""

#. type: defun
#: original_texis/threads.texi:156
#, no-wrap
msgid "mutexp object"
msgstr ""

#. type: defun
#: original_texis/threads.texi:159
msgid "This function returns @code{t} if @var{object} represents an Emacs mutex, @code{nil} otherwise."
msgstr ""

#. type: defun
#: original_texis/threads.texi:161
#, no-wrap
msgid "make-mutex &optional name"
msgstr ""

#. type: defun
#: original_texis/threads.texi:165
msgid "Create a new mutex and return it.  If @var{name} is specified, it is a name given to the mutex.  It must be a string.  The name is for debugging purposes only; it has no meaning to Emacs."
msgstr ""

#. type: defun
#: original_texis/threads.texi:167
#, no-wrap
msgid "mutex-name mutex"
msgstr ""

#. type: defun
#: original_texis/threads.texi:169
msgid "Return the name of @var{mutex}, as specified to @code{make-mutex}."
msgstr ""

#. type: defun
#: original_texis/threads.texi:171
#, no-wrap
msgid "mutex-lock mutex"
msgstr ""

#. type: defun
#: original_texis/threads.texi:175
msgid "This will block until this thread acquires @var{mutex}, or until this thread is signaled using @code{thread-signal}.  If @var{mutex} is already owned by this thread, this simply returns."
msgstr ""

#. type: defun
#: original_texis/threads.texi:177
#, no-wrap
msgid "mutex-unlock mutex"
msgstr ""

#. type: defun
#: original_texis/threads.texi:180
msgid "Release @var{mutex}.  If @var{mutex} is not owned by this thread, this will signal an error."
msgstr ""

#. type: defmac
#: original_texis/threads.texi:182
#, no-wrap
msgid "with-mutex mutex body@dots{}"
msgstr ""

#. type: defmac
#: original_texis/threads.texi:186
msgid "This macro is the simplest and safest way to evaluate forms while holding a mutex.  It acquires @var{mutex}, invokes @var{body}, and then releases @var{mutex}.  It returns the result of @var{body}."
msgstr ""

#. type: Plain text
#: original_texis/threads.texi:194
msgid "A @dfn{condition variable} is a way for a thread to block until some event occurs.  A thread can wait on a condition variable, to be woken up when some other thread notifies the condition."
msgstr ""

#. type: Plain text
#: original_texis/threads.texi:199
msgid "A condition variable is associated with a mutex and, conceptually, with some condition.  For proper operation, the mutex must be acquired, and then a waiting thread must loop, testing the condition and waiting on the condition variable.  For example:"
msgstr ""

#. type: example
#: original_texis/threads.texi:204
#, no-wrap
msgid ""
"(with-mutex mutex\n"
"  (while (not global-variable)\n"
"    (condition-wait cond-var)))\n"
msgstr ""

#. type: Plain text
#: original_texis/threads.texi:208
msgid "The mutex ensures atomicity, and the loop is for robustness---there may be spurious notifications."
msgstr ""

#. type: Plain text
#: original_texis/threads.texi:212
msgid "Similarly, the mutex must be held before notifying the condition.  The typical, and best, approach is to acquire the mutex, make the changes associated with this condition, and then notify it:"
msgstr ""

#. type: example
#: original_texis/threads.texi:217
#, no-wrap
msgid ""
"(with-mutex mutex\n"
"  (setq global-variable (some-computation))\n"
"  (condition-notify cond-var))\n"
msgstr ""

#. type: defun
#: original_texis/threads.texi:219
#, no-wrap
msgid "make-condition-variable mutex &optional name"
msgstr ""

#. type: defun
#: original_texis/threads.texi:224
msgid "Make a new condition variable associated with @var{mutex}.  If @var{name} is specified, it is a name given to the condition variable.  It must be a string.  The name is for debugging purposes only; it has no meaning to Emacs."
msgstr ""

#. type: defun
#: original_texis/threads.texi:226
#, no-wrap
msgid "condition-variable-p object"
msgstr ""

#. type: defun
#: original_texis/threads.texi:229
msgid "This function returns @code{t} if @var{object} represents a condition variable, @code{nil} otherwise."
msgstr ""

#. type: defun
#: original_texis/threads.texi:231
#, no-wrap
msgid "condition-wait cond"
msgstr ""

#. type: defun
#: original_texis/threads.texi:235
msgid "Wait for another thread to notify @var{cond}, a condition variable.  This function will block until the condition is notified, or until a signal is delivered to this thread using @code{thread-signal}."
msgstr ""

#. type: defun
#: original_texis/threads.texi:238
msgid "It is an error to call @code{condition-wait} without holding the condition's associated mutex."
msgstr ""

#. type: defun
#: original_texis/threads.texi:242
msgid "@code{condition-wait} releases the associated mutex while waiting.  This allows other threads to acquire the mutex in order to notify the condition."
msgstr ""

#. type: defun
#: original_texis/threads.texi:244
#, no-wrap
msgid "condition-notify cond &optional all"
msgstr ""

#. type: defun
#: original_texis/threads.texi:249
msgid "Notify @var{cond}.  The mutex with @var{cond} must be held before calling this.  Ordinarily a single waiting thread is woken by @code{condition-notify}; but if @var{all} is not @code{nil}, then all threads waiting on @var{cond} are notified."
msgstr ""

#. type: defun
#: original_texis/threads.texi:254
msgid "@code{condition-notify} releases the associated mutex while waiting.  This allows other threads to acquire the mutex in order to wait on the condition."
msgstr ""

#. type: defun
#: original_texis/threads.texi:256
#, no-wrap
msgid "condition-name cond"
msgstr ""

#. type: defun
#: original_texis/threads.texi:259
msgid "Return the name of @var{cond}, as passed to @code{make-condition-variable}."
msgstr ""

#. type: defun
#: original_texis/threads.texi:261
#, no-wrap
msgid "condition-mutex cond"
msgstr ""

#. type: defun
#: original_texis/threads.texi:264
msgid "Return the mutex associated with @var{cond}.  Note that the associated mutex cannot be changed."
msgstr ""
